#include "Example_lib.hpp"
#include <boost/range/adaptor/indexed.hpp>
// g++ -std=c++17 test_lib.cpp -o test_lib -ldl
int main()
{
    int arr[5] = {16, 2, 77, 40, 120};

    auto [max_value, max_index] = Example_lib::Max<int>(arr);

    std::cout << max_value << " " << max_index << std::endl;

    Example_lib::Input_Min<int> test_x;
    test_x.x = arr;
    test_x.N    = std::size(arr);

    std::cout << test_x.N << std::endl;

    Example_lib::Output_Min<int> test_y = Example_lib::Min(&test_x);

    std::cout << test_y.min_value << std::endl;
    std::cout << test_y.min_value_idx << std::endl;

    Example_lib::Class_Example_1<int> Cls_Example_1{1, 5};
    std::cout << Cls_Example_1.Get_Parameters() << std::endl;
    std::cout << Cls_Example_1.Addition() << std::endl;
    std::cout << Cls_Example_1.Substraction() << std::endl;

    return 0;
}

#include <iostream>
#include <tuple>

namespace Example_lib{
    template <typename T> 
    struct Output_Min{
        T min_value;
        int min_value_idx;
    };

    template <typename T> 
    struct Input_Min{
        T *x;
        size_t N;
    };


    template<typename T, std::size_t N> std::tuple<T, int> Max(T (&x)[N]){
        T max_val = x[0]; int max_val_idx = 0;
        for(auto i = 1; i < N; ++i){
            if(max_val < x[i]){
                max_val     = x[i];
                max_val_idx = i;
            }
        }

        return {max_val, max_val_idx};
    }

    template <typename T> Output_Min<T> Min(Input_Min<T> *x){
        Output_Min<T> y;
        y.min_value = x->x[0]; y.min_value_idx = 0;

        for(auto i = 1; i < x->N; ++i){
            if(y.min_value > x->x[i]){
                y.min_value     = x->x[i];
                y.min_value_idx = i;
            }
        }

       return y;
    }

    template <typename T>
    class Class_Example_1 {
        public:
            // Initialization of input parameters
            explicit Class_Example_1(const T param_1, const T param_2) 
                : __param_1(param_1), __param_2(param_2)
            {}
            ~Class_Example_1()
            {}

            std::string Get_Parameters(){
                return std::string("Parameter 1: ") + std::to_string(this->__param_1) + "\nParameter 2: " + std::to_string(this->__param_2);
            }

            T Addition(){ 
                return this->__param_1 + this->__param_2; 
            }

            T Substraction() { 
                return this->__param_1 - this->__param_2;
            }

        private:
            T __param_1{0};
            T __param_2{0};
    };
}
