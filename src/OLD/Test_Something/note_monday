#include <iostream>
#include <tuple>
#include <ctime>

namespace Example_lib{
    template <typename T> 
    struct Find_Min_Value_Output_str{
        T value;
        int idx;
    };

    template <typename T> 
    struct Find_Min_Value_Input_str{
        T *x;
        size_t N;
    };

    template<typename T> T* Generate_Random_Array(T MIN, T MAX, int N){
        std::srand(time(0)); 

        T* output = new T[N];
        for(auto i = 0; i < N; ++i){
            output[i] = static_cast<T>(MIN + rand() % (MAX - MIN + 1));
        }

        return output;
    }

    template<typename T, std::size_t N> std::tuple<T, int> Max(T (&x)[N]){
        T max_val = x[0]; int max_val_idx = 0;
        for(auto i = 1; i < N; ++i){
            if(max_val < x[i]){
                max_val     = x[i];
                max_val_idx = i;
            }
        }

        return {max_val, max_val_idx};
    }

    template <typename T> Find_Min_Value_Output_str<T> Min(Find_Min_Value_Input_str<T> *x){
        Find_Min_Value_Output_str<T> output;
        output.value = x->x[0]; output.idx = 0;
        for(auto i = 1; i < x->N; ++i){
            if(output.value > x->x[i]){
                output.value = x->x[i];
                output.idx   = i;
            }
        }

       return output;
    }

    template <typename T>
    class Simple_Calculator {
        public:
            // Initialization of input parameters
            explicit Simple_Calculator(const T param_1, const T param_2) 
                : __param_1(param_1), __param_2(param_2)
            {}
            ~Simple_Calculator()
            {}

            std::string Get_Parameters(){
                return std::string("Parameter 1: ") + std::to_string(this->__param_1) + "\nParameter 2: " + std::to_string(this->__param_2);
            }

            T Addition(){ 
                return this->__param_1 + this->__param_2; 
            }

            T Substraction() { 
                return this->__param_1 - this->__param_2;
            }

        private:
            T __param_1{0};
            T __param_2{0};
    };
}

#include "Example_lib.hpp"
// g++ -std=c++17 test_lib.cpp -o test_lib -ldl
int main()
{
    const size_t SIZE = 5;

    auto *arr_1 = Example_lib::Generate_Random_Array<int>(1, 100, SIZE);

    int arr_n[SIZE];
    std::copy(arr_1, arr_1 + SIZE, arr_n);

    for(auto i = 0; i < SIZE; ++i){
        std::cout << arr_n[i] << std::endl;
    }

    auto [max_value, max_index] = Example_lib::Max<int>(arr_n);
    std::cout << max_value << std::endl;
    std::cout << max_index << std::endl;

    Example_lib::Find_Min_Value_Input_str<int> input_str;
    input_str.x = arr_n;
    input_str.N = std::size(arr_n);

    Example_lib::Find_Min_Value_Output_str<int> output_str = Example_lib::Min(&input_str);
    std::cout << output_str.value << std::endl;
    std::cout << output_str.idx << std::endl;

    Example_lib::Simple_Calculator<int> Calculator{output_str.value, max_value};
    std::cout << Calculator.Get_Parameters() << std::endl;
    std::cout << Calculator.Addition() << std::endl;
    std::cout << Calculator.Substraction() << std::endl;

    return 0;
}
